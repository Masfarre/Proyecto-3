# app.py - Archivo principal de la aplicación
import os
import re
import json
import datetime
from collections import defaultdict
import spacy
from flask import Flask, render_template, request, redirect, url_for, jsonify

# Cargar modelo de NLP
nlp = spacy.load("en_core_web_sm")

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'supersecretkey')

# Base de datos simple (en producción usaríamos una base de datos real)
users = {
    "manager@company.com": {
        "password": "securepass123",
        "name": "John Manager",
        "role": "manager",
        "team": "leadership"
    },
    "dev1@company.com": {
        "password": "developerpass",
        "name": "Alice Developer",
        "role": "developer",
        "skills": ["python", "javascript", "api"],
        "workload": 30
    },
    "dev2@company.com": {
        "password": "devpassword",
        "name": "Bob Coder",
        "role": "developer",
        "skills": ["python", "database", "testing"],
        "workload": 70
    },
    "marketing@company.com": {
        "password": "marketingpass",
        "name": "Carol Marketer",
        "role": "marketing",
        "skills": ["seo", "content", "campaign"],
        "workload": 50
    }
}

tasks = []
task_id_counter = 1

class Task:
    def __init__(self, title, description, deadline, creator):
        global task_id_counter
        self.id = task_id_counter
        task_id_counter += 1
        self.title = title
        self.description = description
        self.deadline = deadline
        self.created_at = datetime.datetime.now()
        self.creator = creator
        self.assigned_to = None
        self.status = "open"
        self.priority = None
        self.category = None
        self.auto_assign_priority()
        self.categorize_task()
        
    def auto_assign_priority(self):
        """Asigna prioridad automáticamente basado en palabras clave"""
        content = (self.title + " " + self.description).lower()
        doc = nlp(content)
        
        # Palabras clave para alta prioridad
        high_priority_terms = ["urgent", "critical", "important", "asap", "blocker", "high priority"]
        
        # Palabras clave para prioridad media
        medium_priority_terms = ["medium", "moderate", "soon", "normal"]
        
        # Detectar fechas cercanas
        near_deadline = False
        if self.deadline:
            deadline_date = datetime.datetime.strptime(self.deadline, "%Y-%m-%d")
            days_until = (deadline_date - datetime.datetime.now()).days
            if days_until <= 3:
                near_deadline = True
        
        # Asignar prioridad
        if any(term in content for term in high_priority_terms) or near_deadline:
            self.priority = "high"
        elif any(term in content for term in medium_priority_terms):
            self.priority = "medium"
        else:
            self.priority = "low"
    
    def categorize_task(self):
        """Categoriza la tarea basado en su contenido"""
        content = (self.title + " " + self.description).lower()
        doc = nlp(content)
        
        categories = {
            "development": ["bug", "feature", "code", "api", "database", "test", "fix", "deploy"],
            "marketing": ["campaign", "seo", "content", "social media", "ad", "promote"],
            "design": ["design", "ui", "ux", "mockup", "prototype"],
            "documentation": ["doc", "manual", "guide", "tutorial", "help"],
            "meeting": ["meeting", "call", "discuss", "review"]
        }
        
        category_scores = defaultdict(int)
        for token in doc:
            for category, keywords in categories.items():
                if token.text in keywords:
                    category_scores[category] += 1
        
        if category_scores:
            self.category = max(category_scores, key=category_scores.get)
        else:
            self.category = "general"
    
    def assign_to_user(self, user_email):
        """Asigna la tarea a un usuario"""
        if user_email in users:
            self.assigned_to = user_email
            return True
        return False
    
    def auto_assign(self):
        """Asigna automáticamente la tarea al usuario más adecuado"""
        suitable_users = []
        
        for email, user_data in users.items():
            # Solo considerar usuarios con roles adecuados
            if user_data["role"] not in ["developer", "designer", "marketing"]:
                continue
                
            # Comprobar habilidades
            if self.category == "development" and "development" not in user_data.get("skills", []):
                continue
                
            if self.category == "marketing" and "marketing" not in user_data.get("skills", []):
                continue
                
            # Considerar carga de trabajo
            if user_data["workload"] < 80:  # Solo asignar si carga < 80%
                suitable_users.append((email, user_data["workload"]))
        
        if suitable_users:
            # Asignar al usuario con menor carga de trabajo
            suitable_users.sort(key=lambda x: x[1])
            self.assigned_to = suitable_users[0][0]
            # Actualizar carga de trabajo
            users[self.assigned_to]["workload"] += 10
            return True
        
        return False
    
    def to_dict(self):
        """Convierte el objeto tarea a diccionario"""
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
            "deadline": self.deadline,
            "created_at": self.created_at.strftime("%Y-%m-%d %H:%M"),
            "creator": self.creator,
            "assigned_to": self.assigned_to,
            "status": self.status,
            "priority": self.priority,
            "category": self.category
        }

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        
        if email in users and users[email]['password'] == password:
            # En una aplicación real usaríamos sesiones seguras
            return redirect(url_for('dashboard', user=email))
        
        return render_template('login.html', error="Invalid credentials")
    
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    user_email = request.args.get('user')
    if user_email not in users:
        return redirect(url_for('login'))
    
    user = users[user_email]
    user_tasks = [task for task in tasks if task.assigned_to == user_email]
    
    # Estadísticas para el dashboard
    task_stats = {
        "total": len(tasks),
        "open": len([t for t in tasks if t.status == "open"]),
        "in_progress": len([t for t in tasks if t.status == "in_progress"]),
        "completed": len([t for t in tasks if t.status == "completed"])
    }
    
    return render_template('dashboard.html', user=user, tasks=user_tasks, stats=task_stats)

@app.route('/create-task', methods=['GET', 'POST'])
def create_task():
    user_email = request.args.get('user')
    if user_email not in users:
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        title = request.form['title']
        description = request.form['description']
        deadline = request.form['deadline']
        
        new_task = Task(title, description, deadline, user_email)
        
        # Autoasignación si está habilitada
        auto_assign = request.form.get('auto_assign') == 'on'
        if auto_assign:
            new_task.auto_assign()
        
        tasks.append(new_task)
        return redirect(url_for('dashboard', user=user_email))
    
    return render_template('create_task.html', user=user_email)

@app.route('/task/<int:task_id>')
def view_task(task_id):
    user_email = request.args.get('user')
    if user_email not in users:
        return redirect(url_for('login'))
    
    task = next((t for t in tasks if t.id == task_id), None)
    if not task:
        return "Task not found", 404
    
    return render_template('task_detail.html', task=task, user=user_email)

@app.route('/update-status/<int:task_id>', methods=['POST'])
def update_status(task_id):
    user_email = request.args.get('user')
    if user_email not in users:
        return redirect(url_for('login'))
    
    task = next((t for t in tasks if t.id == task_id), None)
    if not task:
        return "Task not found", 404
    
    new_status = request.form['status']
    task.status = new_status
    
    # Si se completa, reducir carga de trabajo
    if new_status == "completed" and task.assigned_to:
        users[task.assigned_to]["workload"] = max(0, users[task.assigned_to]["workload"] - 10)
    
    return redirect(url_for('view_task', task_id=task_id, user=user_email))

@app.route('/api/tasks', methods=['GET'])
def api_tasks():
    return jsonify([task.to_dict() for task in tasks])

@app.route('/api/users', methods=['GET'])
def api_users():
    return jsonify(users)

@app.route('/api/stats', methods=['GET'])
def api_stats():
    priority_count = {"high": 0, "medium": 0, "low": 0}
    category_count = defaultdict(int)
    
    for task in tasks:
        priority_count[task.priority] += 1
        category_count[task.category] += 1
    
    return jsonify({
        "priority_distribution": priority_count,
        "category_distribution": dict(category_count),
        "completion_rate": len([t for t in tasks if t.status == "completed"]) / len(tasks) * 100 if tasks else 0
    })

if __name__ == '__main__':
    # Crear algunas tareas de ejemplo
    sample_tasks = [
        ("Fix critical login bug", "Users can't login to the system. This is urgent!", "2023-11-15", "manager@company.com"),
        ("Create marketing campaign", "Plan Q4 marketing campaign for new product launch", "2023-12-01", "manager@company.com"),
        ("Update documentation", "Add new API endpoints to developer documentation", "2023-11-30", "dev1@company.com"),
        ("Improve UI design", "Redesign dashboard interface for better UX", "2023-11-25", "manager@company.com"),
        ("Schedule team meeting", "Organize monthly team meeting to discuss progress", "2023-11-20", "manager@company.com")
    ]
    
    for title, desc, deadline, creator in sample_tasks:
        task = Task(title, desc, deadline, creator)
        task.auto_assign()
        tasks.append(task)
    
    app.run(debug=True)
